const f=(t,e,c)=>{const a=t.src.charAt(e-1),r=t.src.charAt(e+1);return{canOpen:c||r!==" "&&r!=="	",canClose:!/[0-9]/u.exec(r)&&(c||a!==" "&&a!=="	")}},k=t=>(e,c)=>{if(e.src[e.pos]!=="$")return!1;let a=f(e,e.pos,t);if(!a.canOpen)return c||(e.pending+="$"),e.pos++,!0;const r=e.pos+1;let n=r,s;for(;(n=e.src.indexOf("$",n))!==-1;){for(s=n-1;e.src[s]==="\\";)s--;if((n-s)%2===1)break;n++}if(n===-1)return c||(e.pending+="$"),e.pos=r,!0;if(n-r===0)return c||(e.pending+="$$"),e.pos=r+1,!0;if(a=f(e,n,t),!a.canClose)return c||(e.pending+="$"),e.pos=r,!0;if(!c){const i=e.push("math_inline","math",0);i.markup="$",i.content=e.src.slice(r,n)}return e.pos=n+1,!0},m=()=>(t,e)=>{const c=t.pos;if(t.src.slice(c,c+2)!=="\\(")return!1;let a=c+2,r=!1;for(;a<t.src.length-1;){if(t.src.slice(a,a+2)==="\\)"){let n=0,s=c-1;for(;s>=0&&t.src[s]==="\\";)n++,s--;if(n%2===1)return!1;let i=0,l=a-1;for(;l>=c+2&&t.src[l]==="\\";)i++,l--;if(i%2===0){r=!0;break}}a++}if(!r)return!1;if(!e){const n=t.push("math_inline","math",0);n.markup="\\(",n.content=t.src.slice(c+2,a)}return t.pos=a+2,!0},d=()=>(t,e,c,a)=>{let r=t.bMarks[e]+t.tShift[e],n=t.eMarks[e];if(r+2>n||t.src.slice(r,r+2)!=="$$")return!1;r+=2;let s=t.src.slice(r,n).trim();if(a)return!0;let i=!1;s.endsWith("$$")&&(s=s.slice(0,-2),i=!0);let l=e,o="";for(;!i&&(l++,!(l>=c||(r=t.bMarks[l]+t.tShift[l],n=t.eMarks[l],r<n&&t.tShift[l]<t.blkIndent)));)t.src.slice(r,n).trim().endsWith("$$")&&(o=t.src.slice(r,t.src.slice(0,n).lastIndexOf("$$")).trim(),i=!0);t.line=i?l+1:l;const u=t.push("math_block","math",0);return u.block=!0,u.content=(s?`${s}
`:"")+t.getLines(e+1,l,t.tShift[e],!0)+(o?`${o}
`:""),u.map=[e,t.line],u.markup="$$",!0},b=()=>(t,e,c,a)=>{let r=t.bMarks[e]+t.tShift[e],n=t.eMarks[e];if(r+2>n||t.src.slice(r,r+2)!=="\\[")return!1;r+=2;let s=t.src.slice(r,n).trim();if(a)return!0;let i=!1;s.endsWith("\\]")&&(s=s.slice(0,-2),i=!0);let l=e,o="";for(;!i&&(l++,!(l>=c||(r=t.bMarks[l]+t.tShift[l],n=t.eMarks[l],r<n&&t.tShift[l]<t.blkIndent)));)t.src.slice(r,n).trim().endsWith("\\]")&&(o=t.src.slice(r,t.src.slice(0,n).lastIndexOf("\\]")).trim(),i=!0);if(!i)return!1;t.line=l+1;const u=t.push("math_block","math",0);return u.block=!0,u.content=(s?`${s}
`:"")+t.getLines(e+1,l,t.tShift[e],!0)+(o?`${o}
`:""),u.map=[e,t.line],u.markup="\\[",!0},$=(t,e)=>{if(typeof e?.render!="function")throw new Error('[@mdit/plugin-tex]: "render" option should be a function');const{allowInlineWithSpace:c=!1,mathFence:a=!1,delimiters:r="dollars",render:n}=e;if(a){const s=t.renderer.rules.fence;t.renderer.rules.fence=(...i)=>{const[l,o,,u]=i,{content:h,info:p}=l[o];return p.trim()==="math"?n(h,!0,u):s(...i)}}(r==="dollars"||r==="all")&&(t.inline.ruler.after("escape","math_inline_dollar",k(c)),t.block.ruler.after("blockquote","math_block_dollar",d(),{alt:["paragraph","reference","blockquote","list"]})),(r==="brackets"||r==="all")&&(t.inline.ruler.before("escape","math_inline_bracket",m()),t.block.ruler.after("blockquote","math_block_bracket",b(),{alt:["paragraph","reference","blockquote","list"]})),t.renderer.rules.math_inline=(s,i,l,o)=>n(s[i].content,!1,o),t.renderer.rules.math_block=(s,i,l,o)=>n(s[i].content,!0,o)};export{$ as tex};
//# sourceMappingURL=index.js.map
